#!/usr/bin/env node

'use strict';

/**
 * Module dependencies.
 */

const app = require('../app');
const debug = require('debug')('cryptochain:server');
const http = require('http');
const superagent = require('superagent');
const io = require('../app/io');

/**
 * Get port from environment and store in Express.
 */

const DEFAULT_PORT = process.env.PORT || 3000;

const port = normalizePort(DEFAULT_PORT);
app.set('port', port);
app.set('env', process.env.NODE_ENV);

/**
 * Synchronisation at start with root node
 */

const syncWithRootState = () => {
  superagent.get(`${process.env.ROOT_NODE_ADDRESS}/api/blocks`).set('accept', 'json').end((err, res) => {
      if( !err && res.status === 200 ) {
        console.log('replace chain on a sync with', res.body);
        try {
          app.locals.blockchain.replaceChain(res.body);
        } catch(err) {
          console.error(err.message);
        }
      }
  });

  superagent.get(`${process.env.ROOT_NODE_ADDRESS}/api/transaction-pool-map`).set('accept', 'json').end((err, res) => {
    if( !err && res.status === 200 ) {
      console.log('replace transaction pool map on a sync with', res.body);
      app.locals.transactionPool.setMap(res.body);
    }
  });

  superagent.get(`${process.env.ROOT_NODE_ADDRESS}/api/known-addresses`).set('accept', 'json').end((err, res) => {
    if( !err && res.status === 200 ) {
      console.log('add knwon addresses', res.body);
      res.body.forEach((address) => {
        app.locals.addresses.add(address);
      });
    }
  });
}
/**
 * Create HTTP server and attach socket.io server to it.
 */

const server = http.createServer(app);
io.attach(server);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port, () => {
  console.log(app.locals.wallet.knownAddresses);
  app.locals.pubsub.broadcastAddresses();
  if(process.env.PEER ) {
    syncWithRootState();
  }
});
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
